{
	"name": "FacturationApp",
	"properties": {
		"folder": {
			"name": "FacturaciÃ³n"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "2738ef89-55ef-4bd3-9a12-27f5fa411391"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"print(\"Hello World\")"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.functions import col\n",
					"from pyspark.sql import functions as F\n",
					"\n",
					"spark=SparkSession.builder.master(\"local[1]\").appName(\"Facturation-1\").getOrCreate()\n",
					"spark"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"path = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_CUSTOMER.csv\"\n",
					"path1 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\TBL_CONF_GET_CONDITION.csv\"\n",
					"\n",
					"path2 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_SUBSCRIBER_202301291808.csv\"\n",
					"path3 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_AGREEMENT_RESOURCE_202301291807.csv\"\n",
					"\n",
					"path4 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_EVENT_DISTRIBUTE_202301291809.csv\"\n",
					"path5 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\OMS_TBOA_REASON_CODES_202301291811.csv\"\n",
					"\n",
					"path6 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_CSM_PAY_CHANNEL_202301291814.csv\"\n",
					"path7 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_AR1_ACCOUNT.csv\"\n",
					"\n",
					"path8 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\TBL_CTL_DIRECCIONES_FACT.csv\"\n",
					"path9 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_CSM_BEN_202301291815.csv\"\n",
					"\n",
					"path10 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_CM9_CONV_MIG_TRANS_KEY_202301291819.csv\"\n",
					"path11 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\TBL_CTL_SUSCRIPTOR_FACTURACION.csv\"\n",
					"\n",
					"path13 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\MCM_AR1_INVOICE INV.csv\"\n",
					"path14 = r\"C:\\Users\\senga\\Documents\\ATT\\Facturation\\data\\TBL_MTL_FACTURA_GENERAL.csv\"\n",
					"\n",
					"\n",
					"df_MCM_CUSTOMER = spark.read.load(path, format='csv', delimiter='|', header=True)\n",
					"df_TBL_CONF_GET_CONDITION = spark.read.load(path1, format='csv', delimiter='|', header=True)\n",
					"\n",
					"df_MCM_SUBSCRIBER = spark.read.load(path2, format='csv', delimiter=',', header= True)\n",
					"df_MCM_AGREEMENT_RESOURCE = spark.read.load(path3, format='csv', delimiter=',', header=True)\n",
					"\n",
					"df_MCM_EVENT_DISTRIBUTE = spark.read.load(path4, format='csv', delimiter=',', header=True)\n",
					"df_OMS_TBOA_REASON_CODES = spark.read.load(path5, format='csv', delimiter=',', header=True)\n",
					"\n",
					"df_MCM_CSM_PAY_CHANNEL = spark.read.load(path6, format='csv', delimiter=',', header=True)\n",
					"df_MCM_AR1_ACCOUNT = spark.read.load(path7, format='csv', delimiter='|', header=True)\n",
					"\n",
					"df_TBL_CTL_DIRECCIONES_FACT = spark.read.load(path8, format='csv', delimiter='|', header=True)\n",
					"df_MCM_CSM_BEN = spark.read.load(path9, format='csv', delimiter=',', header=True)\n",
					"\n",
					"df_MCM_CM9_CONV_MIG_TRANS_KEY = spark.read.load(path10, format='csv', delimiter=',', header=True)\n",
					"df_TBL_CTL_SUSCRIPTOR_FACTURACION = spark.read.load(path11, format='csv', delimiter='|', header=True)\n",
					"\n",
					"df_MCM_AR1_INVOICE = spark.read.load(path13, format='csv', delimiter='|', header=True)\n",
					"df_TBL_MTL_FACTURA_GENERAL = spark.read.load(path14, format='csv', delimiter='|', header=True)\n",
					"\n",
					"\n",
					"df_MCM_CSM_BEN.show(0)\n",
					"\n",
					""
				],
				"execution_count": 196
			},
			{
				"cell_type": "markdown",
				"source": [
					"      /* Creating Temp Views */"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_MCM_CUSTOMER.createOrReplaceTempView(\"MCM_CUSTOMER\")\n",
					"df_TBL_CONF_GET_CONDITION.createOrReplaceTempView(\"TBL_CONF_GET_CONDITION\")\n",
					"df_MCM_SUBSCRIBER.createOrReplaceTempView(\"MCM_SUBSCRIBER\")\n",
					"df_MCM_AGREEMENT_RESOURCE.createOrReplaceTempView(\"MCM_AGREEMENT_RESOURCE\")\n",
					"df_MCM_EVENT_DISTRIBUTE.createOrReplaceTempView(\"MCM_EVENT_DISTRIBUTE\")\n",
					"df_OMS_TBOA_REASON_CODES.createOrReplaceTempView(\"OMS_TBOA_REASON_CODES\")\n",
					"df_MCM_CSM_PAY_CHANNEL.createOrReplaceTempView(\"MCM_CSM_PAY_CHANNEL\")\n",
					"df_MCM_AR1_ACCOUNT.createOrReplaceTempView(\"MCM_AR1_ACCOUNT\")\n",
					"df_TBL_CTL_DIRECCIONES_FACT.createOrReplaceTempView(\"TBL_CTL_DIRECCIONES_FACT\")\n",
					"df_MCM_CSM_BEN.createOrReplaceTempView(\"MCM_CSM_BEN\")\n",
					"df_MCM_CM9_CONV_MIG_TRANS_KEY.createOrReplaceTempView(\"MCM_CM9_CONV_MIG_TRANS_KEY\")\n",
					"df_TBL_CTL_SUSCRIPTOR_FACTURACION.createOrReplaceTempView(\"TBL_CTL_SUSCRIPTOR_FACTURACION\")\n",
					"df_MCM_AR1_INVOICE.createOrReplaceTempView(\"MCM_AR1_INVOICE\")\n",
					"df_TBL_MTL_FACTURA_GENERAL.createOrReplaceTempView(\"TBL_MTL_FACTURA_GENERAL\")\n",
					""
				],
				"execution_count": 197
			},
			{
				"cell_type": "markdown",
				"source": [
					"     /* Insert de datos en tabla temporal: SCH_PSTG_BLUE.TBL_TMP_SI_SUSCRIPTOR_RESOURCES */"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"scrolled": false
				},
				"source": [
					"DIAS_DELTA = 4\n",
					"\n",
					"qstr_l1=r\"\"\"SELECT CUSTOMER_ID\n",
					"        FROM MCM_CUSTOMER CU\n",
					"        WHERE DATE_TRUNC('DD',CU.CTRL_INGEST_DATE) BETWEEN\n",
					"               (SELECT DATE_TRUNC('DD',FECHA_INICIO) FROM TBL_CONF_GET_CONDITION WHERE ESQUEMA = 'SCH_PSTG_BLUE' AND TRIM(TABLA) = 'MCM_CUSTOMER')\n",
					"                 AND\n",
					"               (SELECT DATE_TRUNC('DD',FECHA_FIN) FROM TBL_CONF_GET_CONDITION WHERE ESQUEMA = 'SCH_PSTG_BLUE' AND TRIM(TABLA) = 'MCM_CUSTOMER')\n",
					"        ORDER BY CUSTOMER_ID\"\"\"\n",
					"\n",
					"#We are using f'string' for string formation\n",
					"qstr_l2 = f\"\"\"SELECT NULL\n",
					"        FROM MCM_SUBSCRIBER AS SUBS\n",
					"        WHERE (SYS_CREATION_DATE >= DATE_TRUNC('DD',(current_timestamp() - interval {DIAS_DELTA} days))\n",
					"            OR SYS_UPDATE_DATE >= DATE_TRUNC('DD',(current_timestamp()- interval {DIAS_DELTA} days))\n",
					"            OR CUSTOMER_ID IN ({qstr_l1}))\"\"\"\n",
					"\n",
					"qstr_l3 =f\"\"\"SELECT\n",
					"        RS.AGREEMENT_NO\n",
					"        ,RS.SYS_CREATION_DATE\n",
					"        ,RS.RESOURCE_PRM_CD\n",
					"        ,RS.RESOURCE_TYPE\n",
					"        ,RS.RESOURCE_VALUE\n",
					"        ,RS.EFFECTIVE_DATE\n",
					"        ,RS.RESRC_SEQ_NO\n",
					"        ,MAX(RS.RESRC_SEQ_NO) OVER (PARTITION BY RS.AGREEMENT_NO,RS.RESOURCE_TYPE) AS MAX_RESRC_SEQ_NO\n",
					"        ,MIN(RS.RESRC_SEQ_NO) OVER (PARTITION BY RS.AGREEMENT_NO,RS.RESOURCE_TYPE) AS MIN_RESRC_SEQ_NO\n",
					"    FROM MCM_AGREEMENT_RESOURCE RS\n",
					"    WHERE EXISTS ({qstr_l2}  \n",
					"        AND RS.AGREEMENT_NO = SUBS.SUBSCRIBER_NO \n",
					"    )\n",
					"    ORDER BY RS.AGREEMENT_NO\"\"\"\n",
					"\n",
					"qstr_lf = f\"\"\"SELECT\n",
					"    AGREEMENT_NO\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'C' AND RSC.RESRC_SEQ_NO = RSC.MAX_RESRC_SEQ_NO THEN RESOURCE_VALUE END) Voice_Line_MSISDN\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'I' AND RSC.RESRC_SEQ_NO = RSC.MAX_RESRC_SEQ_NO THEN RESOURCE_VALUE END) IMSI_number\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'U' AND RSC.RESRC_SEQ_NO = RSC.MAX_RESRC_SEQ_NO THEN RESOURCE_VALUE END) UFMI\n",
					"    --,MAX(CASE WHEN RESOURCE_TYPE = 'EI' THEN RESOURCE_VALUE END) EIMSI\n",
					"    --,MAX(CASE WHEN RESOURCE_TYPE = 'EC' THEN RESOURCE_VALUE END) EMSISDN\n",
					"    ,current_timestamp() CTRL_INGEST_DATE\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'C' AND RSC.RESRC_SEQ_NO = RSC.MIN_RESRC_SEQ_NO THEN RESOURCE_VALUE END) Voice_Line_MSISDN_Inicial\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'I' AND RSC.RESRC_SEQ_NO = RSC.MIN_RESRC_SEQ_NO THEN RESOURCE_VALUE END) IMSI_number_Inicial\n",
					"    ,MAX(CASE WHEN RESOURCE_TYPE = 'U' AND RSC.RESRC_SEQ_NO = RSC.MIN_RESRC_SEQ_NO THEN RESOURCE_VALUE END) UFMI_Inicial\n",
					"FROM ({qstr_l3}) AS RSC\n",
					"WHERE (RSC.RESRC_SEQ_NO = RSC.MAX_RESRC_SEQ_NO OR RSC.RESRC_SEQ_NO = RSC.MIN_RESRC_SEQ_NO)\n",
					"GROUP BY RSC.AGREEMENT_NO \"\"\"\n",
					"\n",
					"print(qstr_lf)\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_RESOURCES=spark.sql(qstr_lf)\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_RESOURCES.createOrReplaceTempView(\"TBL_TMP_SI_SUSCRIPTOR_RESOURCES\")\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_RESOURCES.show(5)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"     /*Insert de datos en tabla temporal: SCH_PSTG_BLUE.TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR*/"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr_l1 = r\"\"\"SELECT ED.DISTRIBUTION_NO\n",
					"            ,ED.AGREEMENT_NO ID_SUSCRIPTOR\n",
					"            ,ED.TARGET_PCN\n",
					"            ,ED.SOC\n",
					"            ,ED.EG_ITEM_CD\n",
					"            ,ED.AGR_LEVEL\n",
					"            ,ED.EFFECTIVE_DATE\n",
					"            ,ED.EXPIRATION_DATE\n",
					"            ,ROW_NUMBER() OVER (PARTITION BY ED.AGREEMENT_NO,ED.EG_ITEM_CD ORDER BY ED.EFFECTIVE_DATE DESC) RN\n",
					"    FROM MCM_EVENT_DISTRIBUTE ED\n",
					"    ORDER BY ED.AGREEMENT_NO,ED.EG_ITEM_CD\"\"\"\n",
					"\n",
					"qstr_lf = f\"\"\"SELECT DISTRIBUTION_NO\n",
					"        ,ID_SUSCRIPTOR\n",
					"        ,TARGET_PCN\n",
					"        ,SOC\n",
					"        ,EG_ITEM_CD\n",
					"        ,AGR_LEVEL\n",
					"        ,EFFECTIVE_DATE\n",
					"        ,EXPIRATION_DATE\n",
					"        ,RN\n",
					"        ,current_timestamp() CTRL_INGEST_DATE\n",
					"FROM ({qstr_l1}) R\n",
					"WHERE RN = 1\"\"\"\n",
					"\n",
					"print(qstr_lf)\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR = spark.sql(qstr_lf)\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR.createOrReplaceTempView(\"TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR\")\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR.show(1)\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /* Insert de datos en tabla temporal: TBL_TMP_SI_SUSCRIPTOR_FACTURACION */\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr_l1 = f\"\"\"SELECT SU.CUSTOMER_ID\n",
					"        ,SU.SUBSCRIBER_NO\n",
					"        ,SU.SUB_STS_RSN_CD RAZON_STATUS\n",
					"        ,SU.L9_ORDER_NUMBER\n",
					"        ,SU.L9_SUB_PLAN_TYPE\n",
					"        ,SU.PRIM_RESOURCE_VAL\n",
					"        ,SU.LINK_NEXT_SUB_NO\n",
					"        ,SU.SUB_STATUS\n",
					"        ,SU.SUB_STATUS_DATE\n",
					"        ,SU.LINK_PREV_SUB_NO\n",
					"        ,SU.CALC_PYM_CATEGORY\n",
					"        ,SU.INIT_ACT_DATE\n",
					"        ,UPPER(B.REASON) RAZON_STATUS_DESCR\n",
					"        ,B.L9_VOLUNTARY_INDICATOR VOLUNTARY_INDICATOR\n",
					"        ,CASE WHEN SU.CALC_PYM_CATEGORY = 'POST' THEN '251'\n",
					"                        WHEN SU.CALC_PYM_CATEGORY = 'BOTH' AND SU.L9_SUB_PLAN_TYPE = 'Hybrid_CreditCheck' THEN '251'\n",
					"                        WHEN SU.CALC_PYM_CATEGORY = 'BOTH' AND SU.L9_SUB_PLAN_TYPE = 'Hybrid_No_CreditCheck' THEN '786985'\n",
					"                        WHEN SU.CALC_PYM_CATEGORY ='PRE' THEN '779745' END ITM_DISTR\n",
					"        ,SU.SUBSCRIBER_TYPE\n",
					"        ,SU.L9_COMPANY_CODE\n",
					"    FROM MCM_SUBSCRIBER AS SU\n",
					"    LEFT JOIN (\n",
					"            SELECT REASON_ID, UPPER(REASON) REASON,L9_VOLUNTARY_INDICATOR, COUNT(1) OVER (PARTITION BY REASON_ID) REGS\n",
					"            FROM OMS_TBOA_REASON_CODES\n",
					"            WHERE LANGUAGE='ES' \n",
					"                AND VISIBLE = 1\n",
					"            ORDER BY REASON_ID\n",
					"        ) B\n",
					"        ON SU.SUB_STS_RSN_CD = B.REASON_ID AND B.REGS = 1\n",
					"    WHERE (SU.SYS_CREATION_DATE >= DATE_TRUNC('DD',(current_timestamp() - interval {DIAS_DELTA} days))\n",
					"            OR SU.SYS_UPDATE_DATE >= DATE_TRUNC('DD',(current_timestamp() - interval {DIAS_DELTA} days))\n",
					"            )\n",
					"            OR EXISTS (\n",
					"                SELECT 1\n",
					"                FROM \n",
					"                    (\n",
					"                    SELECT CUSTOMER_ID\n",
					"                    FROM MCM_CUSTOMER CU\n",
					"                    WHERE DATE_TRUNC('DD',CU.CTRL_INGEST_DATE) BETWEEN (SELECT DATE_TRUNC('DD',FECHA_INICIO) FROM TBL_CONF_GET_CONDITION WHERE ESQUEMA = 'SCH_PSTG_BLUE' AND TRIM(TABLA) = 'MCM_CUSTOMER')\n",
					"                        AND (SELECT DATE_TRUNC('DD',FECHA_FIN)    FROM TBL_CONF_GET_CONDITION WHERE ESQUEMA = 'SCH_PSTG_BLUE' AND TRIM(TABLA) = 'MCM_CUSTOMER')\n",
					"                    ORDER BY CUSTOMER_ID\n",
					"                    ) C\n",
					"                WHERE C.CUSTOMER_ID = SU.CUSTOMER_ID\n",
					"                )\n",
					"    ORDER BY SU.SUBSCRIBER_NO,SU.CUSTOMER_ID\"\"\"\n",
					"\n",
					"qstr_l2 = r\"\"\"SELECT\n",
					"        CTA.ACCOUNT_ID\n",
					"        ,CTA.AR_ACCOUNT_TYPE\n",
					"        ,AR_ACCOUNT_SUB_TYPE\n",
					"        ,CTA.AR_BALANCE\n",
					"        ,CTA.ACCOUNT_STATUS\n",
					"        ,CTA.BE\n",
					"        ,CTA.CM_ACCOUNT_NUMBER\n",
					"        ,CTA.CUSTOMER_NO\n",
					"        ,CTA.L9_CYCLE_CODE\n",
					"        ,CTA.LAST_ACTIVITY_STATUS_DATE\n",
					"        ,CTA.L9_PREPAID_IND\n",
					"        ,ROW_NUMBER() OVER (PARTITION BY CTA.CUSTOMER_NO ORDER BY CTA.LAST_ACTIVITY_STATUS_DATE DESC, L9_CYCLE_CODE) RN\n",
					"        ,COUNT(1) OVER (PARTITION BY CTA.CUSTOMER_NO) REGS\n",
					"        ,PCN.BAN\n",
					"        ,PCN.BEN\n",
					"        ,PCN.PAYMENT_CATEGORY\n",
					"        ,PCN.PCN_STATUS\n",
					"        ,PCN.PCN_DESC\n",
					"    FROM MCM_AR1_ACCOUNT CTA\n",
					"    LEFT JOIN MCM_CSM_PAY_CHANNEL PCN\n",
					"        ON CTA.CUSTOMER_NO = PCN.CUSTOMER_ID\n",
					"        AND PCN.PYM_CHANNEL_NO = CTA.ACCOUNT_ID\n",
					"    --WHERE CTA.ACCOUNT_STATUS <> 'T'\n",
					"    ORDER BY CTA.CUSTOMER_NO ASC,CTA.SYS_CREATION_DATE DESC\"\"\"\n",
					"\n",
					"qstr_l3 = r\"\"\"SELECT ID_ENTIDAD\n",
					"           ,NVL(PRIMER_NOMBRE, '') || CASE WHEN SEGUNDO_NOMBRE IS NULL THEN '' ELSE ' ' || NVL(SEGUNDO_NOMBRE, '') END || ' ' || NVL(APELLIDO_PATERNO, '') || ' ' || NVL(APELLIDO_MATERNO, '') NOMBRE_ASOCIADO_A_CUENTA\n",
					"           ,ADDRESS_ID\n",
					"              ,CALLE\n",
					"              ,NUMERO_INTERIOR\n",
					"              ,NUMERO_EXTERIOR\n",
					"              ,COLONIA\n",
					"              ,CODIGO_POSTAL\n",
					"              ,DELEGACION_MUNICIPIO\n",
					"              ,ESTADO\n",
					"              ,CORREO_BILLING_AGREEMENT\n",
					"              ,CIUDAD\n",
					"    FROM TBL_CTL_DIRECCIONES_FACT\n",
					"    WHERE TIPO_ENTIDAD = 'ACCOUNT'\n",
					"           AND LINK_SEQ_NO = SECUENCIA_ACTUAL\n",
					"    ORDER BY ID_ENTIDAD\"\"\"\n",
					"\n",
					"\n",
					"qstr_lf = f\"\"\"\n",
					"SELECT\n",
					"    SU.CUSTOMER_ID\n",
					"    ,ADDT.NOMBRE_ASOCIADO_A_CUENTA\n",
					"    ,NVL(AR1.ACCOUNT_ID,0) AS ID_CUENTA_CLIENTE\n",
					"    ,SU.SUBSCRIBER_NO AS ID_SUSCRIPTOR\n",
					"    ,CASE \n",
					"        WHEN (AR1.ACCOUNT_STATUS = 'O') THEN 'ABIERTA'\n",
					"        WHEN (AR1.ACCOUNT_STATUS = 'T') THEN 'TENTATIVA'\n",
					"        WHEN (AR1.ACCOUNT_STATUS = 'C') THEN 'CERRADA'\n",
					"        WHEN (AR1.ACCOUNT_STATUS = 'CAN') THEN 'CANCELADA'\n",
					"        ELSE NULL\n",
					"        END AS INDICADOR_CUENTA_ACTIVA\n",
					"    ,SU.INIT_ACT_DATE AS FECHA_ACTIVACION\n",
					"    ,AR1.LAST_ACTIVITY_STATUS_DATE AS FECHA_MODIFICACION_CUENTA\n",
					"    ,NULL AS LIMITE_GASTOS\n",
					"    ,BEN.BEN AS BILLING_AGREEMENT\n",
					"    ,BEN.SYS_UPDATE_DATE AS FECHA_MODIFICACION_BILLING\n",
					"    ,BEN.STATUS_DATE AS FECHA_ESTATUS_BILLING\n",
					"    ,BEN.BEN_STATUS AS ESTATUS_BILLING\n",
					"    ,NULL AS FECHA_CREDITO_APLICADO\n",
					"    ,NULL AS FECHA_CREDITO_FINALIZADO\n",
					"    ,NULL AS ID_AUTORIZACION_CREDITO\n",
					"    ,CU.CREDIT_CLASS\n",
					"    ,NULL AS NOMBRE_CREDITO\n",
					"    ,ADDT.ADDRESS_ID\n",
					"    ,ADDT.CALLE\n",
					"    ,ADDT.NUMERO_INTERIOR\n",
					"    ,ADDT.NUMERO_EXTERIOR\n",
					"    ,ADDT.COLONIA\n",
					"    ,ADDT.CODIGO_POSTAL\n",
					"    ,ADDT.DELEGACION_MUNICIPIO\n",
					"    --'          ' AS CIUDAD,\n",
					"    ,ADDT.CIUDAD\n",
					"    ,ADDT.ESTADO\n",
					"    ,ADDT.CORREO_BILLING_AGREEMENT\n",
					"    ,AR1.L9_PREPAID_IND AS INDICADOR_PREPAGO\n",
					"    ,SU.L9_ORDER_NUMBER AS ORDEN\n",
					"    ,SU.L9_SUB_PLAN_TYPE AS TIPO_PLAN_CONTRATO\n",
					"    ,SU.PRIM_RESOURCE_VAL AS MDN\n",
					"    ,cast(SU.LINK_NEXT_SUB_NO as INT) AS CONTRATO_NUEVO\n",
					"    ,SU.SUB_STATUS\n",
					"    ,SU.SUB_STATUS_DATE AS FECHA_SUB_STATUS\n",
					"    ,SU.LINK_PREV_SUB_NO AS CONTRATO_ANTERIOR\n",
					"    ,AR1.L9_CYCLE_CODE CICLO_FACTURACION\n",
					"    ,AR1.AR_ACCOUNT_TYPE TIPO_CUENTA\n",
					"    ,AR1.AR_ACCOUNT_SUB_TYPE SUBTIPO_CUENTA\n",
					"    ,CU.DFLT_POST_PCN\n",
					"    ,CU.DFLT_PRE_PCN\n",
					"    ,RSC.Voice_Line_MSISDN\n",
					"    ,RSC.IMSI_number\n",
					"    ,RSC.UFMI\n",
					"    ,CURRENT_TIMESTAMP() AS CTRL_INGEST_DATE\n",
					"    ,CU.BILL_CYCLE CICLO_FACTURACION_CUST\n",
					"    ,CU.CUSTOMER_TYPE\n",
					"    ,CU.CUST_SUB_TYPE CUSTOMER_SUB_TYPE\n",
					"    ,CU.L9_RFC RFC_CUSTOMER\n",
					"    ,RSC.Voice_Line_MSISDN_Inicial\n",
					"    ,RSC.IMSI_number_Inicial\n",
					"    ,RSC.UFMI_Inicial\n",
					"    ,SU.RAZON_STATUS\n",
					"    ,SU.RAZON_STATUS_DESCR\n",
					"    ,SU.VOLUNTARY_INDICATOR\n",
					"    ,SU.SUBSCRIBER_TYPE\n",
					"    ,SU.L9_COMPANY_CODE\n",
					"    -- the below columns as aded to proceed with dev\n",
					"    ,NULL  as ID_CLIENTE_LEGADO\n",
					"    ,NULL as ID_CUENTA_LEGADO\n",
					"    ,NULL as ID_SUSCRIPTOR_LEGADO\n",
					"    ,NULL as ORIGEN_LEGADO\n",
					"FROM ( {qstr_l1}\n",
					") AS SU\n",
					"INNER JOIN MCM_CUSTOMER CU\n",
					"    ON SU.CUSTOMER_ID = CU.CUSTOMER_ID\n",
					"LEFT JOIN TBL_TMP_SI_SUSCRIPTOR_FACT_DISTR DISTR\n",
					"        ON SU.SUBSCRIBER_NO = DISTR.ID_SUSCRIPTOR AND SU.ITM_DISTR = DISTR.EG_ITEM_CD\n",
					"LEFT JOIN (\n",
					"    {qstr_l2}\n",
					") AR1\n",
					"    ON DISTR.TARGET_PCN = AR1.ACCOUNT_ID\n",
					"LEFT JOIN MCM_CSM_BEN BEN\n",
					"    ON AR1.ACCOUNT_ID = BEN.BAN\n",
					"LEFT JOIN (\n",
					"    {qstr_l3}\n",
					") ADDT\n",
					"    ON AR1.ACCOUNT_ID = ADDT.ID_ENTIDAD\n",
					"LEFT JOIN TBL_TMP_SI_SUSCRIPTOR_RESOURCES RSC\n",
					"    ON SU.SUBSCRIBER_NO = RSC.AGREEMENT_NO\n",
					"ORDER BY SU.SUBSCRIBER_NO ASC\"\"\"\n",
					"\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACTURACION = spark.sql(qstr_lf)\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACTURACION.createOrReplaceTempView(\"TBL_TMP_SI_SUSCRIPTOR_FACTURACION\")\n",
					"df_TBL_TMP_SI_SUSCRIPTOR_FACTURACION.show(1)"
				],
				"execution_count": 164
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /* Actualiza tabla: SCH_PSTG_BLUE.TBL_TMP_SI_SUSCRIPTOR_FACTURACION (INFO LEGADA 1) */"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr = r\"\"\"UPDATE SF\n",
					"SET SF.ID_CLIENTE_LEGADO = LEG.ID_CLIENTE_LEGADO\n",
					"    ,SF.ID_CUENTA_LEGADO = LEG.ID_CUENTA_LEGADO\n",
					"    ,SFID_SUSCRIPTOR_LEGADO = LEG.ID_SUSCRIPTOR_LEGADO\n",
					"    ,SF.ORIGEN_LEGADO = LEG.ORIGEN_LEGADO \n",
					" FROM TBL_TMP_SI_SUSCRIPTOR_FACTURACION SF\n",
					"  inner join \n",
					"  (\n",
					"    SELECT cast(SUBSCRIBER_NO as VARCHAR) ID_SUSCRIPTOR\n",
					"        ,cast(CUSTOMER_ID as VARCHAR) ID_CLIENTE\n",
					"        ,LGC_CUSTOMER_ID ID_CLIENTE_LEGADO\n",
					"        ,LGC_CUSTCODE ID_CUENTA_LEGADO\n",
					"        ,LGC_CO_ID ID_SUSCRIPTOR_LEGADO\n",
					"        ,LGC_SYS ORIGEN_LEGADO\n",
					"    FROM MCM_CM9_CONV_MIG_TRANS_KEY\n",
					"    ORDER BY SUBSCRIBER_NO\n",
					") LEG\n",
					"WHERE SF.ID_SUSCRIPTOR = LEG.ID_SUSCRIPTOR\n",
					"    AND SF.ID_CLIENTE = LEG.ID_CLIENTE\n",
					"    AND SF.ID_SUSCRIPTOR_LEGADO IS NULL\"\"\"\n",
					"\n",
					"\n",
					"df = spark.sql(tmp)\n",
					"df.show(0)\n",
					"\n",
					"\n",
					"\"\"\"\n",
					"FROM\n",
					"TBL_TMP_SI_SUSCRIPTOR_FACTURACION  SF\n",
					"left outer join MCM_CM9_CONV_MIG_TRANS_KEY LEG\n",
					"on SF.ID_SUSCRIPTOR = cast(SUBSCRIBER_NO as VARCHAR)\n",
					"\tAND SF.ID_CLIENTE = cast(CUSTOMER_ID as VARCHAR)\"\"\""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"### -TODO- Update Query has to come from script_si_paso_006a"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /* script_si_paso_006b */ "
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /*Inserta (Merge) datos en tabla: SCH_MST_BLUE.TBL_CTL_SUSCRIPTOR_FACTURACION*/"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# In this Query,\n",
					"#  1. DELETE to delete the old existing rows from SCH_MST_BLUE.TBL_CTL_SUSCRIPTOR_FACTURACION matched with SCH_PSTG_BLUE.TBL_TMP_SI_SUSCRIPTOR_FACTURACION\n",
					"#  2. INSERT to merge rows from the  SCH_PSTG_BLUE.TBL_TMP_SI_SUSCRIPTOR_FACTURACION to SCH_MST_BLUE.TBL_CTL_SUSCRIPTOR_FACTURACION\n",
					"# These above two steps(merge) can be achived using Union as below\n",
					"\n",
					"\n",
					"qstr_merge = f\"\"\" SELECT * FROM TBL_CTL_SUSCRIPTOR_FACTURACION  \n",
					"                     where ID_SUSCRIPTOR NOT IN (SELECT ID_SUSCRIPTOR FROM TBL_TMP_SI_SUSCRIPTOR_FACTURACION)     \n",
					"                UNION\n",
					"                SELECT * FROM TBL_TMP_SI_SUSCRIPTOR_FACTURACION\"\"\"\n",
					"                \n",
					"df_TBL_CTL_SUSCRIPTOR_FACTURACION = spark.sql(qstr_merge) \n",
					"    "
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /* script_si_paso_008a */"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /*Inserta en tabla: SCH_PSTG_BLUE.TBL_TMP_SI_FACTURA_GENERAL_DELTA*/"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr_lf = f\"\"\"\n",
					"    SELECT INV.ACCOUNT_ID\n",
					"    ,INV.L9_BILL_SEQ_NO\n",
					"    ,INV.INVOICE_ID\n",
					"    ,INV.BILL_SEQ_NO\n",
					"    ,INV.BILLING_INVOICE_NUMBER\n",
					"    ,INV.INVOICE_STATUS\n",
					"    ,INV.CYCLE_CODE\n",
					"    ,INV.CYCLE_MONTH\n",
					"    ,INV.CYCLE_YEAR\n",
					"    ,INV.L9_BILLING_CURR_CHG\n",
					"    ,INV.INVOICE_BALANCE\n",
					"    ,INV.INVOICE_AMOUNT\n",
					"    ,INV.TAX_AMOUNT\n",
					"    ,INV.DISCOUNT_AMOUNT\n",
					"    ,INV.DISCOUNT_TAX_AMT\n",
					"    ,INV.DISCOUNT_NET_AMT\n",
					"    ,INV.CREDIT_AMOUNT\n",
					"    ,INV.CREDIT_TAX_AMOUNT\n",
					"    ,INV.CREDIT_NET_AMOUNT\n",
					"    ,INV.INVOICE_CREATION_DATE\n",
					"    ,INV.L9_DUE_DATE\n",
					"    ,L9_INVOICE_CLOSING_DATE\n",
					"    ,INV.INVOICE_TYPE\n",
					"    ,CURRENT_TIMESTAMP() CTRL_INGEST_DATE\n",
					"FROM MCM_AR1_INVOICE INV\n",
					"WHERE 1=1 --INV.INVOICE_TYPE = 'BILL'\n",
					"    AND INV.CTRL_INGEST_DATE >= date_trunc('DD',CURRENT_TIMESTAMP())\n",
					"    OR ACCOUNT_ID IN (\n",
					"            SELECT ACCOUNT_ID ID_CUENTA\n",
					"            FROM MCM_AR1_ACCOUNT as ACC\n",
					"            WHERE CTRL_INGEST_DATE >= date_trunc('DD',CURRENT_TIMESTAMP())\n",
					"    )\"\"\"\n",
					"\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL_DELTA = spark.sql(qstr_lf)\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL_DELTA.createOrReplaceTempView(\"TBL_TMP_SI_FACTURA_GENERAL_DELTA\");\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL_DELTA.show(1)"
				],
				"execution_count": 189
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /*Inserta a tabla: SCH_PSTG_BLUE.TBL_TMP_SI_FACTURA_GENERAL*/"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr_l1 = f\"\"\"\n",
					"            SELECT\n",
					"        INV.ACCOUNT_ID\n",
					"        ,INV.L9_BILL_SEQ_NO AS NO_SEC\n",
					"        ,INV.INVOICE_ID AS ID_FACTURA\n",
					"        ,INV.BILL_SEQ_NO AS FOLIO_SEC\n",
					"        ,INV.BILLING_INVOICE_NUMBER AS FACTURA\n",
					"        ,CASE \n",
					"            WHEN INV.INVOICE_STATUS = 'C' THEN 'CERRADA'\n",
					"            WHEN INV.INVOICE_STATUS = 'F' THEN 'FINALIZADA'\n",
					"            WHEN INV.INVOICE_STATUS = 'O' THEN 'ABIERTA'\n",
					"            ELSE ''\n",
					"            END AS ESTATUS_FACTURA\n",
					"        ,INV.CYCLE_CODE AS CICLO\n",
					"        ,INV.CYCLE_MONTH AS CICLO_MES\n",
					"        ,INV.CYCLE_YEAR AS CICLO_ANUAL\n",
					"        ,INV.L9_BILLING_CURR_CHG AS TOTAL_FACTURA_PERIODO_ACTUAL\n",
					"        ,INV.INVOICE_BALANCE AS SALDO_FACTURA\n",
					"        ,INV.INVOICE_AMOUNT AS MONTO_FACTURA\n",
					"        ,INV.TAX_AMOUNT AS MONTO_IVA\n",
					"        ,INV.DISCOUNT_AMOUNT AS MONTO_DESCUENTO\n",
					"        ,INV.DISCOUNT_TAX_AMT AS MONTO_DESCUENTO_IVA\n",
					"        ,INV.DISCOUNT_NET_AMT AS MONTO_NETO_DESCUENTO\n",
					"        ,(INV.CREDIT_AMOUNT * - 1) AS MONTO_CREDITO\n",
					"        ,(INV.CREDIT_TAX_AMOUNT * - 1) AS MONTO_CREDITO_IVA\n",
					"        ,(INV.CREDIT_NET_AMOUNT * - 1) AS MONTO_NETO_CREDITO\n",
					"        ,INV.INVOICE_CREATION_DATE AS FECHA_EMISION\n",
					"        ,INV.L9_DUE_DATE AS FECHA_LIMITE_PAGO\n",
					"        ,DATEDIFF(INV.L9_DUE_DATE, current_date()) AS DIAS_VENCIMIENTO\n",
					"        ---PERMITE CALCULAR LA CAPA DE FACTURAS ABIERTAS DE UNA CUENTA. SI AUN NO SE CUMPLE LA FECHA LIMITE DE PAGO, SE DETERMINA COMO VIGENTE. DE NO SER ASI, SE CALCULA\n",
					"        ----LA CAPA CON BASE A LOS DIAS TRANSCURRIDOS A PARTIR DE LA FECHA DE VENCIMIENTO.\n",
					"        ,CASE \n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) <= 0 AND INV.INVOICE_STATUS = 'O' THEN 'VIGENTE'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 1 AND 30 AND INV.INVOICE_STATUS = 'O' THEN '1 - 30'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 31 AND 60 AND INV.INVOICE_STATUS = 'O' THEN '31 - 60'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 61 AND 90 AND INV.INVOICE_STATUS = 'O' THEN '61 - 90'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 91 AND 120 AND INV.INVOICE_STATUS = 'O' THEN '91 - 120'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 121 AND 150 AND INV.INVOICE_STATUS = 'O' THEN '121 - 150'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) BETWEEN 151 AND 180 AND INV.INVOICE_STATUS = 'O' THEN '151 - 180'\n",
					"            WHEN DATEDIFF(INV.L9_DUE_DATE, current_date()) > 180 AND INV.INVOICE_STATUS = 'O' THEN '> 180'\n",
					"            WHEN INV.INVOICE_STATUS IN ('C','F') OR INVOICE_BALANCE = 0 THEN 'VIGENTE'\n",
					"            END AS ANTIGUEDAD_SALDOS\n",
					"        ,L9_INVOICE_CLOSING_DATE FECHA_CIERRE_DCTO\n",
					"        ,INVOICE_TYPE ID_TIPO_DOCUMENTO\n",
					"        ,DECODE(INV.INVOICE_TYPE,'BILL','FACTURA','CN','NOTA DE CREDITO','DN','NOTA DE DEBITO','RFND','REEMBOLSO','WR','WR',INV.INVOICE_TYPE) TIPO_DOCUMENTO\n",
					"    FROM TBL_TMP_SI_FACTURA_GENERAL_DELTA INV\n",
					"    --WHERE INV.INVOICE_TYPE = 'BILL' /*Filtrado en el llenado de la tabla DELTA*/\n",
					"    ORDER BY INV.ACCOUNT_ID\n",
					"        ,INV.L9_BILL_SEQ_NO\n",
					"        ,INV.INVOICE_ID\n",
					"        ,INV.BILLING_INVOICE_NUMBER\n",
					"        ,INV.CYCLE_CODE\n",
					"        ,INV.CYCLE_MONTH\n",
					"        ,INV.CYCLE_YEAR\n",
					"        ,INV.INVOICE_CREATION_DATE\n",
					"        ,INV.L9_DUE_DATE\"\"\"\n",
					"\n",
					"qstr_l2 = f\"\"\"SELECT INV.ACCOUNT_ID\n",
					"        ,INV.INVOICE_ID\n",
					"        ,( SUM(INV.INVOICE_BALANCE) OVER ( PARTITION BY INV.ACCOUNT_ID ORDER BY INV.INVOICE_ID ) ) AS SALDO_ACUMULADO\n",
					"    FROM MCM_AR1_INVOICE AS INV\n",
					"    WHERE INV.INVOICE_TYPE = 'BILL'\n",
					"      AND INV.CYCLE_CODE IS NOT NULL\n",
					"    ORDER BY INV.ACCOUNT_ID\n",
					"        ,INV.INVOICE_ID\"\"\"\n",
					"\n",
					"qstr_l3 = f\"\"\"SELECT ID_ENTIDAD\n",
					"        ,PRIMER_NOMBRE\n",
					"        ,SEGUNDO_NOMBRE\n",
					"        ,APELLIDO_PATERNO\n",
					"        ,APELLIDO_MATERNO\n",
					"        ,CALLE\n",
					"        ,NUMERO_EXTERIOR NO_EXTERIOR\n",
					"        ,NUMERO_INTERIOR NO_INTERIOR\n",
					"        ,COLONIA\n",
					"        ,CODIGO_POSTAL\n",
					"        ,DELEGACION_MUNICIPIO\n",
					"        ,ESTADO\n",
					"        ,LINK_SEQ_NO\n",
					"        ,SECUENCIA_ACTUAL\n",
					"    FROM TBL_CTL_DIRECCIONES_FACT\n",
					"    WHERE TIPO_ENTIDAD='ACCOUNT'\n",
					"        AND LINK_SEQ_NO = SECUENCIA_ACTUAL\"\"\"\n",
					"\n",
					"qstr_lf = f\"\"\"SELECT\n",
					"    ACCNT.ID_CUENTA_CLIENTE\n",
					"    ,ACCNT.ID_CLIENTE\n",
					"    ,UPPER(DIR.PRIMER_NOMBRE) PRIMER_NOMBRE\n",
					"    ,UPPER(DIR.SEGUNDO_NOMBRE) SEGUNDO_NOMBRE\n",
					"    ,UPPER(DIR.APELLIDO_PATERNO) APELLIDO_PATERNO\n",
					"    ,UPPER(DIR.APELLIDO_MATERNO) APELLIDO_MATERNO\n",
					"    ,UPPER(CUST.RFC) RFC\n",
					"    ,UPPER(DIR.CALLE) CALLE\n",
					"    ,UPPER(DIR.NO_EXTERIOR) NO_EXTERIOR\n",
					"    ,UPPER(DIR.NO_INTERIOR) NO_INTERIOR\n",
					"    ,UPPER(DIR.COLONIA) COLONIA\n",
					"    ,DIR.CODIGO_POSTAL\n",
					"    ,UPPER(DIR.DELEGACION_MUNICIPIO) DELEGACION_MUNICIPIO\n",
					"    ,UPPER(DIR.ESTADO) ESTADO\n",
					"    ,B.NO_SEC\n",
					"    ,B.ID_FACTURA\n",
					"    ,B.FOLIO_SEC\n",
					"    ,B.FACTURA\n",
					"    ,B.ESTATUS_FACTURA\n",
					"    ,B.CICLO\n",
					"    ,B.CICLO_MES\n",
					"    ,B.CICLO_ANUAL\n",
					"    ,B.TOTAL_FACTURA_PERIODO_ACTUAL\n",
					"    ,B.SALDO_FACTURA\n",
					"    ,B.MONTO_FACTURA\n",
					"    ,B.MONTO_IVA\n",
					"    ,B.MONTO_DESCUENTO\n",
					"    ,B.MONTO_DESCUENTO_IVA\n",
					"    ,B.MONTO_NETO_DESCUENTO\n",
					"    ,B.MONTO_CREDITO\n",
					"    ,B.MONTO_CREDITO_IVA\n",
					"    ,B.MONTO_NETO_CREDITO\n",
					"    ,B.FECHA_EMISION\n",
					"    ,B.FECHA_LIMITE_PAGO\n",
					"    ,C.SALDO_ACUMULADO\n",
					"    ,B.DIAS_VENCIMIENTO\n",
					"    ,B.ANTIGUEDAD_SALDOS\n",
					"    ,current_timestamp() AS CTRL_INGEST_DATE\n",
					"    ,B.FECHA_CIERRE_DCTO\n",
					"    ,B.ID_TIPO_DOCUMENTO\n",
					"    ,B.TIPO_DOCUMENTO\n",
					"FROM (\n",
					"    {qstr_l1}\n",
					") B\n",
					"INNER JOIN (\n",
					"    SELECT ACCOUNT_ID AS ID_CUENTA_CLIENTE\n",
					"        ,CUSTOMER_NO AS ID_CLIENTE\n",
					"        --,AR_BALANCE AS SALDO_CUENTA_AR\n",
					"    FROM MCM_AR1_ACCOUNT\n",
					"    ORDER BY ACCOUNT_ID\n",
					") ACCNT\n",
					"    ON B.ACCOUNT_ID = ACCNT.ID_CUENTA_CLIENTE\n",
					"LEFT JOIN (\n",
					"    ----PERMITE CALCULAR EL SALDO ACUMULADO DE LAS FACTURAS\n",
					"    {qstr_l2}\n",
					") C\n",
					"    ON B.ID_FACTURA = C.INVOICE_ID\n",
					"----PERMITE EXTRAER EL IDENTIFICADOR DE NOMBRE Y DE DOMICILIO EN MCM_ADDRESS_NAME_LINK A NIVEL CUENTA,\n",
					"---- PARA QUE POSTERIORMENTE PUEDAN SER BUSCADOS EN LAS TABLAS MCM_NAME_DATA Y MCM_ADDRESS_DATA\n",
					"LEFT JOIN (\n",
					"    {qstr_l3}\n",
					") DIR\n",
					"    ON DIR.ID_ENTIDAD = B.ACCOUNT_ID\n",
					"LEFT JOIN (\n",
					"    SELECT\n",
					"        CUSTOMER_ID\n",
					"        ,L9_RFC AS RFC\n",
					"    FROM MCM_CUSTOMER\n",
					") CUST\n",
					"    ON ACCNT.ID_CLIENTE = CUST.CUSTOMER_ID\n",
					"ORDER BY ACCNT.ID_CUENTA_CLIENTE,B.NO_SEC\"\"\"\n",
					"\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL = spark.sql(qstr_lf)\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL.createOrReplaceTempView(\"TBL_TMP_SI_FACTURA_GENERAL\")\n",
					"df_TBL_TMP_SI_FACTURA_GENERAL.show(1)"
				],
				"execution_count": 195
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /*  Insercion de datos en tabla: SCH_MST_BLUE.TBL_MTL_FACTURA_GENERAL */"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr_merge = f\"\"\" SELECT * FROM TBL_MTL_FACTURA_GENERAL fin WHERE \n",
					"                     concat(fin.ID_FACTURA, fin.ID_CUENTA_CLIENTE) NOT IN \n",
					"                         (SELECT concat(ID_FACTURA, ID_CUENTA_CLIENTE) FROM TBL_TMP_SI_FACTURA_GENERAL )\n",
					"                         \n",
					"                   UNION\n",
					"                   \n",
					"                   SELECT * FROM TBL_TMP_SI_FACTURA_GENERAL\n",
					"                \"\"\"\n",
					"df_TBL_MTL_FACTURA_GENERAL = spark.sql(qstr_merge)\n",
					"df_TBL_MTL_FACTURA_GENERAL.show(1)"
				],
				"execution_count": 202
			},
			{
				"cell_type": "markdown",
				"source": [
					"    /* SCRATCH PAD AREA */"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"select current_timestamp(), current_timestamp() - interval 2 days\").show(truncate=False)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					""
				]
			}
		]
	}
}