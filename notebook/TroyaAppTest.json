{
	"name": "TroyaAppTest",
	"properties": {
		"folder": {
			"name": "Tests"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "AZUESSYPDDL00",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "c232562b-5af3-400a-83b2-8d9b7422d467"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cf5dca6f-5497-4f92-bba0-a7bb0371b601/resourceGroups/AZUESRG0ADL02/providers/Microsoft.Synapse/workspaces/azuessywadl02/bigDataPools/AZUESSYPDDL00",
				"name": "AZUESSYPDDL00",
				"type": "Spark",
				"endpoint": "https://azuessywadl02.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/AZUESSYPDDL00",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Proceso Troya"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Libraries imports\n",
					"\n",
					"from pyspark.sql import functions as F"
				],
				"execution_count": 33
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Carga de informaciÃ³n"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_CM9_CONV_MIG_TRANS_KEY = spark.read.load('abfss://raw@azuesdlsadl01.dfs.core.windows.net/General/PRDCUSTO/CM9_CONV_MIG_TRANS_KEY/2022/12/12/CM9_CONV_MIG_TRANS_KEY_2022-12-12T08:34:19.7021092.csv', format='csv'\n",
					", header=True)\n",
					"\n",
					"df_RM1_RES = spark.read.load('abfss://raw@azuesdlsadl01.dfs.core.windows.net/General/PRDCUSTO/RM1_RESOURCE/2022/12/12/RM1_RESOURCE_2022-12-12T08:34:19.7521178.csv', format='csv'\n",
					", header=True)\n",
					"\n",
					"df_RM_RES_TYPE = spark.read.load('abfss://raw@azuesdlsadl01.dfs.core.windows.net/General/PRDREFSSCA/RM_RESOURCE_TYPE/2022/12/08/RM_RESOURCE_TYPE_2022-12-08T10:21:26.9255204.csv', format='csv'\n",
					", header=True)\n",
					"\n",
					"df_ARM_MSISDN_RESOURCE = spark.read.load('abfss://raw@azuesdlsadl01.dfs.core.windows.net/General/ARESOM/ARM_MSISDN_RESOURCE/2022/12/16/ARM_MSISDN_RESOURCE_2022-12-16T08:51:50.0170042.csv', format='csv'\n",
					", header=True)"
				],
				"execution_count": 43
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Tabla DT_NUMEROS_CUARENTENA\r\n",
					"Query: p01_DB_COPY_MCM_NUMEROS_CUARENTENA.sh"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"spark.sql(\"set spark.sql.legacy.timeParserPolicy=LEGACY\")\r\n",
					"\r\n",
					"\r\n",
					"df_RM1_RES = df_RM1_RES \\\r\n",
					"    .withColumn('SYS_UPDATE_DATE_TS1', F.to_timestamp(F.col('SYS_UPDATE_DATE'),\"yyyy-MM-dd HH:mm:ss\")) \\\r\n",
					"    .withColumn('SYS_UPDATE_DATE_TS2', F.to_timestamp(F.col('SYS_UPDATE_DATE'),\"yyyy-MM-dd HH:mm:ss.SSSS\")) \\\r\n",
					"    .limit(1000)\r\n",
					""
				],
				"execution_count": 35
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfPersisted = df_RM1_RES.persist()"
				],
				"execution_count": 36
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(dfPersisted.limit(5))"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_RM1_RES.createOrReplaceTempView(\"RM1_RESOURCE\")\r\n",
					"#dfPersisted.createOrReplaceTempView(\"RM1_RESOURCE\")\r\n",
					"df_RM_RES_TYPE.createOrReplaceTempView(\"RM_RESOURCE_TYPE\")"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfPersisted.printSchema()"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# 2019-11- 2019/11/\r\n",
					"\r\n",
					"a = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE > '2019-11-05 05:41:34.0000000'\") # string vs string\r\n",
					"b = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE < '2019-11-05 05:41:34'\") # string vs string\r\n",
					"\r\n",
					"c = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 > '2019-11-05 05:41:34.0000000'\") # timestamp vs string\r\n",
					"d = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 < '2019-11-05 05:41:34'\") # timestamp vs string\r\n",
					"\r\n",
					"e = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= '2019-11-05 05:41:34.0000000'\") # timestamp vs string\r\n",
					"f = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= '2019-11-05 05:41:34'\") # timestamp vs string\r\n",
					"\r\n",
					"g = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE > CAST('2019-11-05 05:41:34.0000000' AS TIMESTAMP)\") # string vs timestamp\r\n",
					"h = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE < CAST('2019-11-05 05:41:34' AS TIMESTAMP)\") # string vs timestamp\r\n",
					"\r\n",
					"i = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 > CAST('2019-11-05 05:41:34.0000000' AS TIMESTAMP)\") # timestamp vs timestamp\r\n",
					"j = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 < CAST('2019-11-05 05:41:34' AS TIMESTAMP)\") # timestamp vs timestamp\r\n",
					"w = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 = CAST('2019-11-05 05:41:34' AS TIMESTAMP)\") # timestamp vs timestamp\r\n",
					"\r\n",
					"k = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= CAST('2019-11-05 05:41:34.0000000' AS TIMESTAMP)\") # timestamp vs timestamp\r\n",
					"l = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= CAST('2019-11-05 05:41:34' AS TIMESTAMP)\") # timestamp vs timestamp\r\n",
					"\r\n",
					"m = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE > TO_TIMESTAMP('2019-11-05 05:41:34.0000000', 'yyyy-MM-dd HH:mm:ss')\") # string vs timestamp\r\n",
					"n = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE < TO_TIMESTAMP('2019-11-05 05:41:34', 'yyyy-MM-dd HH:mm:ss')\") # string vs timestamp\r\n",
					"z = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE = TO_TIMESTAMP('2019-11-05 05:41:34', 'yyyy-MM-dd HH:mm:ss')\") # string vs timestamp\r\n",
					"\r\n",
					"o = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 >= TO_TIMESTAMP('2019-11-05 05:41:34.0000000', 'yyyy-MM-dd HH:mm:ss')\") # timestamp vs timestamp\r\n",
					"p = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS1 >= TO_TIMESTAMP('2019-11-05 05:41:34', 'yyyy-MM-dd HH:mm:ss')\") # timestamp vs timestamp\r\n",
					"\r\n",
					"q = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= TO_TIMESTAMP('2019-11-05 05:41:34.0000000', 'yyyy-MM-dd HH:mm:ss')\") # timestamp vs timestamp\r\n",
					"r = spark.sql(\"SELECT * FROM RM1_RESOURCE WHERE SYS_UPDATE_DATE_TS2 >= TO_TIMESTAMP('2019-11-05 05:41:34', 'yyyy-MM-dd HH:mm:ss')\") # timestamp vs timestamp\r\n",
					"\r\n",
					"print(f'a={a.count()}, b={b.count()}, c={c.count()}, d={d.count()}, e={e.count()}, f={f.count()}, g={g.count()}, h={h.count()}, i={i.count()}, j={j.count()}, \\\r\n",
					"w={w.count()}, k={k.count()}, l={l.count()}, m={m.count()}, n={n.count()}, z={z.count()}, o={o.count()}, p={p.count()}, q={q.count()}, r={r.count()}')"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8        \r\n",
					"         \"\"\"\r\n",
					"        # AND A.SYS_UPDATE_DATE_TS1 >= CAST('2019-11-05 00:00:00' AS TIMESTAMP)\r\n",
					"        # AND A.SYS_UPDATE_DATE_TS1 <= CAST('2019-11-05 23:59:59' AS TIMESTAMP)\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8        \r\n",
					"         AND A.SYS_UPDATE_DATE >= '2022-12-07 00:00:00'\r\n",
					"         AND A.SYS_UPDATE_DATE <= '2022-12-07 23:59:59'\r\n",
					"         \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df_RM1_RES.createOrReplaceTempView(\"RM1_RESOURCE\")\r\n",
					"df_RM_RES_TYPE.createOrReplaceTempView(\"RM_RESOURCE_TYPE\")"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \n",
					"            , 'BLUE' COLOR                                                                        \n",
					"            , current_timestamp() FECHA_PROCESO                                                                \n",
					"        FROM RM1_RESOURCE as A                                                           \n",
					"            ,RM_RESOURCE_TYPE as B                                                         \n",
					"          WHERE 1 = 1                                                                                \n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \n",
					"         AND B.RRT_ID = 8                                                                                            \n",
					"         AND A.SYS_UPDATE_DATE >= TO_TIMESTAMP(concat(current_date() -1, ' 00:00:00'),'yyyy-MM-dd HH:mm:ss')             \n",
					"         AND A.SYS_UPDATE_DATE <= TO_TIMESTAMP(concat(current_date() -1, ' 23:59:59'),'yyyy-MM-dd HH:mm:ss') \"\"\"\n",
					"\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8                                                                                       \r\n",
					" \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8      \r\n",
					"         AND A.SYS_UPDATE_DATE >= '2022/11/12 00:00:00.0000000'                                                                                      \r\n",
					" \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8      \r\n",
					"         AND A.SYS_UPDATE_DATE >= '2022/11/12 00:00:00'                                                                                      \r\n",
					" \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8      \r\n",
					"         AND A.SYS_UPDATE_DATE >= TO_TIMESTAMP('2022/11/12 00:00:00','yyyy-MM-dd HH:mm:ss')                                                                              \r\n",
					" \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				],
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8      \r\n",
					"         AND A.SYS_UPDATE_DATE2 >= TO_TIMESTAMP('2022/11/12 00:00:00','yyyy-MM-dd HH:mm:ss')                                                                              \r\n",
					" \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)\r\n",
					"\r\n",
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr=r\"\"\"SELECT A.RESOURCE_VALUE MDN , A.SYS_UPDATE_DATE FECHA_ACTUALIZA                                                   \r\n",
					"            , A.RESOURCE_STATUS ID_ESTATUS                                                        \r\n",
					"            , 'BLUE' COLOR                                                                        \r\n",
					"            , current_timestamp() FECHA_PROCESO                                                                \r\n",
					"        FROM RM1_RESOURCE as A                                                           \r\n",
					"            ,RM_RESOURCE_TYPE as B                                                         \r\n",
					"          WHERE 1 = 1                                                                                \r\n",
					"         AND A.RESOURCE_TYPE_ID = B.RRT_ID\r\n",
					"         AND A.RESOURCE_status = 'AGING'                                                           \r\n",
					"         AND B.RRT_ID = 8                                                                                            \r\n",
					"         AND A.SYS_UPDATE_DATE >= TO_TIMESTAMP('2022/11/12 00:00:00','yyyy-MM-dd HH:mm:ss')             \r\n",
					"         AND A.SYS_UPDATE_DATE <= TO_TIMESTAMP('2022/11/12 23:59:59','yyyy-MM-dd HH:mm:ss') \"\"\"\r\n",
					"\r\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Tabla MDNS_MIGRADOS_MCM\r\n",
					"Query: p03_1_DB_COPY_MCM_DNS_MIGRADOS_NUMEROS_CUARENTENA.sh"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_CM9_CONV_MIG_TRANS_KEY.createOrReplaceTempView(\"CM9_CONV_MIG_TRANS_KEY\")"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr = r\"SELECT LGC_DN_NUM as MDN_MCM FROM CM9_CONV_MIG_TRANS_KEY WHERE LGC_DN_NUM IS NOT NULL\"\n",
					"\n",
					"df_MDNS_MIGRADOS_MCM = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_MDNS_MIGRADOS_MCM.limit(10))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Filter DT_NUMEROS_CUARENTENA\r\n",
					"Query: p03_2_LIMPIA_MIGRADOS_NUMEROS_CUARENTENA.sh"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"    The actual query is to delete the rows from DT_NUMEROS_CUARENTENA - whose MDN MATCHED with MDN_MCM of MDNS_MIGRADOS_MCM table.\n",
					"\n",
					"    DELETE FROM DWDMART.DT_NUMEROS_CUARENTENA                                                        \n",
					"     WHERE MDN IN                                                                                     \n",
					"             (                                                                                     \n",
					"               SELECT                                                                              \n",
					"                 CUA.MDN                                                                           \n",
					"               FROM DWDMART.MDNS_MIGRADOS_MCM REC                                                  \n",
					"                   ,DWDMART.DT_NUMEROS_CUARENTENA CUA                                              \n",
					"               WHERE 1 = 1                                                                         \n",
					"               AND REC.MDN_MCM = CUA.MDN                                                           \n",
					"             )\n",
					"        \n",
					"     The same effect can be achived - by creating a new dataframe by selecting all rows from  DT_NUMEROS_CUARENTENA \n",
					"    whose MDN NOT MATCHED  with MDN_MCM of MDNS_MIGRADOS_MCM table."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_DT_NUMEROS_CUARENTENA.createOrReplaceTempView(\"DT_NUMEROS_CUARENTENA\")\n",
					"df_MDNS_MIGRADOS_MCM.createOrReplaceTempView(\"MDNS_MIGRADOS_MCM\")"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"qstr = r\"\"\"SELECT * FROM DT_NUMEROS_CUARENTENA WHERE \n",
					"                         MDN NOT IN (SELECT MDN_MCM FROM MDNS_MIGRADOS_MCM)\"\"\"\n",
					"\n",
					"df_DT_NUMEROS_CUARENTENA = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_DT_NUMEROS_CUARENTENA.limit(10))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# "
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Tabla LISTA_CUARENTENA\r\n",
					"Query: p04_SPOOL_NUMEROS_CUARENTENA.sh"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_DT_NUMEROS_CUARENTENA.createOrReplaceTempView(\"DT_NUMEROS_CUARENTENA\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr = r\"\"\"SELECT concat(MDN, '|',                                                            \n",
					"       date_format(FECHA_ACTUALIZA, 'dd/MM/yyyy'), '|',                         \n",
					"       ID_ESTATUS, '|',                                                     \n",
					"       COLOR)                                                                  \n",
					"  FROM DT_NUMEROS_CUARENTENA                                          \n",
					"WHERE FECHA_ACTUALIZA >= TO_TIMESTAMP(concat(current_date() -1, ' 00:00:00'),'yyyy-MM-dd HH:mm:ss') \n",
					"  AND FECHA_ACTUALIZA <= TO_TIMESTAMP(concat(current_date() -1, ' 23:59:59'),'yyyy-MM-dd HH:mm:ss') \n",
					"\"\"\"\n",
					"\n",
					"df_LISTA_CUARENTENA_TXT = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr = r\"\"\"SELECT concat(MDN, '|',                                                            \r\n",
					"       date_format(FECHA_ACTUALIZA, 'dd/MM/yyyy'), '|',                         \r\n",
					"       ID_ESTATUS, '|',                                                     \r\n",
					"       COLOR)                                                                  \r\n",
					"  FROM DT_NUMEROS_CUARENTENA                                          \r\n",
					"WHERE FECHA_ACTUALIZA >= TO_TIMESTAMP(concat('2022/12/12', ' 00:00:00'),'yyyy-MM-dd HH:mm:ss') \r\n",
					"  AND FECHA_ACTUALIZA <= TO_TIMESTAMP(concat('2022/12/12', ' 23:59:59'),'yyyy-MM-dd HH:mm:ss') \r\n",
					"\"\"\"\r\n",
					"\r\n",
					"df_LISTA_CUARENTENA_TXT = spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_LISTA_CUARENTENA_TXT.limit(10))"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"Query: p01_SPOOL_REPORTE_CUARENTENA_MTX.sh\n",
					"    "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"df_ARM_MSISDN_RESOURCE.createOrReplaceTempView(\"ARM_MSISDN_RESOURCE\")"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr = r\"\"\"SELECT concat(RES_VALUE,'|',                                                                                                                                 \n",
					"             (CASE                                                                                                                                                             \n",
					"                            WHEN SYS_UPDATE_DATE IS NULL THEN date_format(SYS_CREATION_DATE, 'dd/MM/yyyy')        \n",
					"                            ELSE date_format(SYS_UPDATE_DATE, 'dd/MM/yyyy')                                                           \n",
					"                          END) ,'|' ,                                                                                         \n",
					"             RES_STATUS ,'|',                                                                                                       \n",
					"             'OCRE')                                                                                                                                                        \n",
					"FROM ARM_MSISDN_RESOURCE                                                                                                                      \n",
					"        WHERE RES_STATUS = 'AGING'                                                                                                                                 \n",
					"        AND RES_TYPE_ID = 10                                                                                                                                         \n",
					"AND SYS_UPDATE_DATE >= TO_TIMESTAMP(concat(current_date() -1, ' 00:00:00'),'yyyy-MM-dd HH:mm:ss')           \n",
					"AND SYS_UPDATE_DATE <= TO_TIMESTAMP(concat(current_date() -1, ' 23:59:59'),'yyyy-MM-dd HH:mm:ss') \n",
					"         \"\"\"\n",
					"\n",
					"df_LISTA_CUARENTENA_MTX_TXT=spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"qstr = r\"\"\"SELECT concat(RES_VALUE,'|',                                                                                                                                 \r\n",
					"             (CASE                                                                                                                                                             \r\n",
					"                            WHEN SYS_UPDATE_DATE IS NULL THEN date_format(SYS_CREATION_DATE, 'dd/MM/yyyy')        \r\n",
					"                            ELSE date_format(SYS_UPDATE_DATE, 'dd/MM/yyyy')                                                           \r\n",
					"                          END) ,'|' ,                                                                                         \r\n",
					"             RES_STATUS ,'|',                                                                                                       \r\n",
					"             'OCRE')                                                                                                                                                        \r\n",
					"FROM ARM_MSISDN_RESOURCE                                                                                                                      \r\n",
					"        WHERE RES_STATUS = 'AGING'                                                                                                                                 \r\n",
					"        AND RES_TYPE_ID = 10                                                                                                                                         \r\n",
					"AND SYS_UPDATE_DATE >= TO_TIMESTAMP(concat('2022/12/12', ' 00:00:00'),'yyyy-MM-dd HH:mm:ss')           \r\n",
					"AND SYS_UPDATE_DATE <= TO_TIMESTAMP(concat('2022/12/12', ' 23:59:59'),'yyyy-MM-dd HH:mm:ss') \r\n",
					"         \"\"\"\r\n",
					"\r\n",
					"df_LISTA_CUARENTENA_MTX_TXT=spark.sql(qstr)"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df_LISTA_CUARENTENA_MTX_TXT.limit(10))"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## UniÃ³n de tablas"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"     /* SCRATCH PAD AREA */"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"spark.sql(\"select to_timestamp(concat(current_date() -1,' 00:00:00'),'yyyy-MM-dd HH:mm:ss')\").show(truncate=False)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					""
				]
			}
		]
	}
}